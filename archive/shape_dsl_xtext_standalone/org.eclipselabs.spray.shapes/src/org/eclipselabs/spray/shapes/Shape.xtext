grammar org.eclipselabs.spray.shapes.Shape with org.eclipse.xtext.common.Terminals // org.eclipselabs.spray.styles.Style 
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
generate shape "http://www.eclipselabs.org/spray/shapes/Shape"


ShapeContainer:
    //imports+=Import*
    shapeContainerElement+=ShapeContainerElement*;

//Import:
//    'import' importedNamespace=ShapesQualifiedNameWithWildCard;

//ShapesQualifiedNameWithWildCard:// returns ecore::EString:
//    QualifiedName ('.' '*')?;

ShapeContainerElement:
    ShapeDefinition | ConnectionDefinition;

ConnectionDefinition:
    'connection' name=ID (style=ShapeStyleRef)? '{'
        ('connection-type' connectionStyle=ConnectionStyle)?
        layout=ShapestyleLayout?
        placing+=PlacingDefinition*
    '}';

ShapeDefinition:
    'shape' name=ID (style=ShapeStyleRef)? '{'
        shapeLayout=ShapeLayout
        shape+=Shape+
        description=Description?
        anchor=Anchor?
    '}';

PlacingDefinition:
    'placing' '{'
        'position' '(' 
            'offset' '=' offset=DOUBLE 
            (
                ',' 'radius' '=' distance=INT 
                ',' 'angle'  '=' angle=INT
            )? 
        ')'
        shapeCon=ShapeConnection
    '}';

Anchor:
    'anchor' type=AnchorType;

AnchorType:
    AnchorPredefinied | AnchorManual;

AnchorPredefinied:
    value=AnchorPredefiniedEnum;

AnchorManual:
    '{' position+=AnchorPosition+ '}';

AnchorPosition:
    'position' '(' pos=AnchorPositionPos ')';

AnchorPositionPos:
    AnchorRelativePosition | AnchorFixPointPosition;

AnchorRelativePosition:
    'xoffset' '=' xoffset=DOUBLE ',' 'yoffset' '=' yoffset=DOUBLE;

AnchorFixPointPosition:
    'x' '=' xcor=INT ',' 'y' '=' ycor=INT;

Shape:
    Line | Polyline | Rectangle | RoundedRectangle | Polygon | 
    Ellipse | Text;

ShapeConnection:
    CDLine | CDPolyline | CDRectangle | CDRoundedRectangle | 
    CDPolygon | CDEllipse | CDText;

CDLine: {CDLine} 
    'line' (style=ShapeStyleRef)? 
    (
        '{' 
            layout=LineLayout 
        '}'
    );

CDPolyline: {CDPolyline} 
    'polyline' (style=ShapeStyleRef)? 
    (
        '{' 
            layout=PolyLineLayout
        '}' 
    );

CDRectangle: {CDRectangle} 
    'rectangle' (style=ShapeStyleRef)? 
    (
        '{' 
            layout=RectangleEllipseLayout 
        '}'
    );

CDRoundedRectangle: {CDRoundedRectangle} 
    'rounded-rectangle' (style=ShapeStyleRef)? 
    (
        '{' 
            layout=RoundedRectangleLayout 
        '}'
    );

CDPolygon: {CDPolygon} 
    'polygon' (style=ShapeStyleRef)? 
    (
        '{' 
            layout=PolyLineLayout
        '}'
    );

CDEllipse: {CDEllipse} 
    'ellipse' (style=ShapeStyleRef)? 
    (
        '{' 
            layout=RectangleEllipseLayout
        '}'
    );

CDText: {CDText} 
    texttype=TextType (style=ShapeStyleRef)? 
    (
        '{' 
            layout=TextLayout 
            body=TextBody
        '}'
    );

Line: {Line} 
    'line' (style=ShapeStyleRef)? 
    (
        '{' 
            layout=LineLayout
        '}' 
    );

Polyline: {Polyline} 
    'polyline' (style=ShapeStyleRef)? (
        '{' 
            layout=PolyLineLayout
        '}' 
    );

Rectangle: {Rectangle} 
    'rectangle' (style=ShapeStyleRef)? 
    (
        '{' 
            (compartmentInfo = CompartmentInfo)?
            layout=RectangleEllipseLayout 
            shape+=Shape* 
        '}'
    );

RoundedRectangle: {RoundedRectangle} 
    'rounded-rectangle' (style=ShapeStyleRef)? (
        '{' 
            layout=RoundedRectangleLayout 
            shape+=Shape*
        '}'
    );

Polygon: {Polygon} 
    'polygon' (style=ShapeStyleRef)? (
        '{' 
            layout=PolyLineLayout 
            shape+=Shape* 
        '}'
    );

Ellipse: {Ellipse} 
    'ellipse' (style=ShapeStyleRef)? 
    (
        '{' 
            (compartmentInfo = CompartmentInfo)?
            layout=RectangleEllipseLayout 
            shape+=Shape* 
        '}'
    );

Text: {Text} 
    texttype=TextType (style=ShapeStyleRef)? (
        '{' 
            layout=TextLayout 
            body=TextBody 
        '}'
    );
    //ShapeRef: {ShapeRef} 'shape' (ref=JvmTypeReference) 
    //"{" layout=RectangleEllipseLayout "}";

CompartmentInfo:
(
    'compartment' '(' 
        (   
            ('layout' '=' compartmentLayout = CompartmentLayout)
            & (
                'stretching' '(' 
                    'horizontal' '=' stretchH=Boolean ',' 
                    'vertical'   '=' stretchV=Boolean 
                ')'
              )?
            & ('spacing' '=' spacing = INT)?
            & ('margin'  '=' margin  = INT)?
            & (invisible ?= 'invisible')?
            & (id = TextBody )?
        )
    ')'
);

enum CompartmentLayout:
    FIXED = 'fixed' | VERTICAL = 'vertical' | HORIZONTAL = 'horizontal' | FIT = 'fit'
;

Compartment: {Compartment} 
    'compartment' 
        (compartmentLayout = CompartmentLayout)? 
        shape = CompartmentShape
    ///'{' common = CommonLayout body = TextBody '}'
;

CompartmentShape:
    CompartmentEllipse | CompartmentRectangle 
    // | CompartmentPolygon | CompartmentRoundedRectangle
;

CompartmentRectangle: {CompartmentRectangle} 
    'rectangle' 
    (
        '{' 
            layout=RectangleEllipseLayout 
            id = TextBody
        '}'
    );

CompartmentRoundedRectangle: {CompartmentRoundedRectangle} 
    'rounded-rectangle' 
    (
        '{' 
            layout=RoundedRectangleLayout 
            id = TextBody
        '}'
    );

CompartmentPolygon: {CompartmentPolygon} 
    'polygon' 
    (   
        '{' 
            layout=PolyLineLayout 
            id = TextBody
        '}'
    );

CompartmentEllipse: {CompartmentEllipse} 
    'ellipse' 
    (
        '{' 
            layout=RectangleEllipseLayout 
            id = TextBody
        '}'
    );

Description: {Description} 
(
    'description' (style=ShapeStyleRef)? 
    '{'
        (
            'align' '(' 
                (
                    'horizontal' '=' hAlign=HAlign ',' 
                    'vertical'   '=' vAlign=VAlign
                )? 
            ')'
        )?
        body=TextBody
    '}'
);

ShapeLayout: {ShapeLayout} 
(
    (
        'size-min' '(' 
            'width'  '=' minwidth=INT ',' 
            'height' '=' minheight=INT 
        ')'
    )?
    & (
        'size-max' '(' 
            'width'  '=' maxwidth=INT ',' 
            'height' '=' maxheight=INT 
        ')'
      )?
    & (
        'stretching' '(' 
            'horizontal' '=' stretchH=Boolean ',' 
            'vertical'   '=' stretchV=Boolean 
        ')'
      )?
    & ('proportional' '=' proportional=Boolean)?
);

RectangleEllipseLayout: {RectangleEllipseLayout} 
(
    (common=CommonLayout) 
    & (layout=ShapestyleLayout)?
);

LineLayout: {LineLayout} 
(
    (point+=Point) 
    (point+=Point)
    (layout=ShapestyleLayout)?
);

PolyLineLayout: {PolyLineLayout} 
(
    (point+=Point) 
    (point+=Point+)
    (layout=ShapestyleLayout)?
);

RoundedRectangleLayout: {RoundedRectangleLayout} 
(
    (common=CommonLayout) 
    & ('curve' '(' 
            'width'  '=' curveWidth=INT ',' 
            'height' '=' curveHeight=INT 
       ')') 
    & (layout=ShapestyleLayout)?
);

TextLayout: {TextLayout}
(
    (common=CommonLayout) 
    & ('align' '(' 
            (
                'horizontal' '=' hAlign=HAlign ',' 
                'vertical'   '=' vAlign=VAlign
            )? 
       ')'
      )? 
    & (layout=ShapestyleLayout)?
);

ShapestyleLayout: {ShapestyleLayout} 
(
    'style' '(' 
        INT//layout=StyleLayout 
    ')'
);

ShapeStyleRef:
    'style' (
        INT//('JAVA' javaStyle=JvmTypeReference) | (dslStyle = [styles::Style] )
    );

CommonLayout: {CommonLayout} 
(
    (
        'position' '(' 
            'x' '=' xcor=INT ',' 
            'y' '=' ycor=INT 
        ')'
    )? 
    & (
        'size' '(' 
            'width'  '=' width=INT ',' 
            'height' '=' heigth=INT 
        ')'
      )
);

TextBody: {TextBody}
    "id" "=" value=ID; //value=TextBodyValue;

//TextBodyValue:
//  TextBodyParameter | TextBodyString;
//
//TextBodyString:
//  param=STRING;
//
//TextBodyParameter:
//  param=[types::JvmIdentifiableElement] ("formatting" format=ID)?;

Point: {Point} 
(
    'point' '(' 
        'x' '=' xcor=N_INT ',' 'y' '=' ycor=N_INT 
        (
            ',' 'curveBefore' '=' curveBefore=INT 
            ',' 'curveAfter'  '=' curveAfter=INT
        )? 
    ')'
);

Boolean:// returns ecore::EBooleanObject:
    'true' | 'false';

enum HAlign:
    LEFT='left' | CENTER='center' | RIGHT='right';

enum VAlign:
    TOP='top' | MIDDLE='middle' | BOTTOM='bottom';

enum ConnectionStyle:
    freeform='freeform' | manhatten='manhatten';

enum AnchorPredefiniedEnum:
    center='center' | corners='corners';

enum TextType:
    default="text" | multiline="wrapped-text";

N_INT://; returns //ecore::EInt:
    ('-')? INT;

DOUBLE: INT "." INT;